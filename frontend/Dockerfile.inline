# 內聯 nginx 配置版本 Dockerfile
# ===== 第一階段：建置應用 =====
FROM node:18-alpine AS builder

# 設置鏡像源為 npm 官方鏡像，提高穩定性
ENV NPM_CONFIG_REGISTRY=https://registry.npmmirror.com
ENV NODE_OPTIONS="--max-old-space-size=4096"

WORKDIR /app

# 先複製 package.json 以利用快取
COPY package*.json ./
# 使用 npm ci 代替 npm install，並添加重試和超時設定
RUN npm config set fetch-retries 5 \
    && npm config set fetch-retry-mintimeout 20000 \
    && npm config set fetch-retry-maxtimeout 120000 \
    && npm ci --quiet || npm install --quiet

# 複製其餘文件
COPY . .
# 如果有任何環境變數設置
RUN if [ -f .env.production ]; then cp .env.production .env; fi
RUN npm run build

# ===== 第二階段：部署靜態檔案 =====
FROM nginx:alpine

# 複製建置完成的檔案到 nginx 的公開資料夾
COPY --from=builder /app/dist /usr/share/nginx/html

# 不使用外部 nginx.conf，而是直接生成配置
RUN echo 'server { \
    listen 80; \
    server_name _; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # 正確設定 MIME 類型 \
    include /etc/nginx/mime.types; \
    \
    # 設定靜態資源的快取控制 \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
        expires 1d; \
        add_header Cache-Control "public, max-age=86400, must-revalidate"; \
        try_files $uri =404; \
    } \
    \
    # 處理字體文件 \
    location ~* \.(woff|woff2|ttf|otf|eot)$ { \
        expires 30d; \
        add_header Cache-Control "public, max-age=2592000"; \
    } \
    \
    # 所有請求都導向 index.html 以支援前端路由 \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

# 清除任何預設的 VOLUME 指令
RUN rm -rf /var/cache/nginx

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
